#Ryan A. Melnyk
#schmelnyk@gmail.com
#UBC Microbiology - Haney Lab

import argparse, os, sys
from Bio import SeqIO
from Bio.Graphics import GenomeDiagram
from reportlab.lib import colors
import seaborn as sns

def parse_args():
	parser = argparse.ArgumentParser(description='''
Given a GFF file and a central locus, generate a plot. Based on Iain Clark's plot_gbk_v2.py script.
Works for the genbank files generated by Prokka.
	''')
	parser.add_argument('gbk', type=str,help='path to gbk file')
	parser.add_argument('locus',type=str,help='locus tag to center diagram around')
	parser.add_argument('span',type=int,help='distance (in bp) to draw around central gene')
	parser.add_argument('--GC',action='store_true',help="use this flag to draw GC content as well")
	parser.add_argument('--no_labels',action='store_true',help='use to hide labels')
	return parser.parse_args()

def parse_genbank(gbk, locus):
	for seq in SeqIO.parse(open(gbk,'r'),"genbank"):
		print seq.id
		for feat in seq.features:
			if feat.type == "CDS":
				if feat.qualifiers['locus_tag'][0] == locus:
					print "Found", locus, "in", seq.id
					print "loc:",feat.location
					return seq, (int(feat.location.start), int(feat.location.end))
	print "locus not found. try again."
	sys.exit()
	return

def plot(seq, span, coords, name, GC, labels):
	gd_diagram = GenomeDiagram.Diagram('gbk',name)
	track_number = 1
	gd_track_for_features = gd_diagram.new_track(track_number, height=1, name="CDS",\
		scale_ticks=False,scale_largeticks=False,scale_largetick_labels=False, scale_largetick_interval=10000,\
		scale_smallticks=False, scale_smalltick_labels=False, scale_smalltick_interval=1000,\
		greytrack=False, hide=False, scale=False
	)
	gd_feature_set = gd_track_for_features.new_set()

	if GC:
		gdgc = gd_diagram.new_track(2,name="GC content",height=2)
		gdgc_set = gdgc.new_set("graph")
		gdgc_set.new_graph(get_GC_content(seq), "GC content", style="line")


	cl = [colors.HexColor(c) for c in sns.color_palette().as_hex()]
	count = 0
	for feat in seq.features:
		if feat.type == "CDS":
			if int(feat.location.start) > (coords[0]-(span/2)) and int(feat.location.end) < (coords[1]+(span/2)):
				print feat.id
				gd_feature_set.add_feature(feat, sigil="BIGARROW", arrowshaft_height=1, arrowhead_length=.4,color=cl[count % len(cl)], \
					label=labels,name=feat.qualifiers['product'][0],label_strand=1,label_size = 8,label_position="middle", label_angle=20, \
					border=colors.black)
				gd_feature_set.add_feature(feat, sigil="BIGARROW", arrowshaft_height=1, arrowhead_length=.4,color=cl[count % len(cl)], \
					label=True,name=feat.qualifiers['locus_tag'][0],label_strand=-1,label_size = 8,label_position="middle", label_angle=90, \
					border=colors.black)
				count += 1
	gd_diagram.draw(x=0.1,format="linear",\
			orientation = "landscape", \
			track_size=0.035,\
			fragments=1, \
			start=coords[0]-(span/2),\
			end=coords[1]+(span/2)
	)
	gd_diagram.write(name, "PDF")
	# gd_diagram.write(name.split(".")[0]+".svg", "SVG")
	return

def get_GC_content(seq):
	s = str(seq.seq)
	vals = []
	for i in range(0,len(s)-3000):
		ratio = float(s[i:i+3000].count("G")+s[i:i+3000].count("C"))/3000.0
		vals.append((i,ratio))
	return vals


def main():
	args = parse_args()
	gbk = os.path.abspath(args.gbk)
	locus = args.locus
	span = args.span
	if args.GC:
		GC = True
	else:
		GC = False
	if args.no_labels:
		labels = False
	else:
		labels = True

	contigseq, coords = parse_genbank(gbk, locus)
	plot(contigseq, span, coords,locus+".pdf", GC, labels)

if __name__ == '__main__':
	main()
